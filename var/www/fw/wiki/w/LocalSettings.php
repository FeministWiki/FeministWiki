<?php
# This file was automatically generated by the MediaWiki 1.31.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

require '/var/www/fw/wiki/.secrets.php';

$fwLang = NULL;
if (array_key_exists('REQUEST_URI', $_SERVER)) {
    $fwUri = $_SERVER['REQUEST_URI'];

    if ($fwUri[0] === '/') {
        $fwUri = substr($fwUri, 1);
    }

    if (strlen($fwUri) === 2) {
        $fwLang = $fwUri;
    } else if (strlen($fwUri) > 2 && $fwUri[2] === '/') {
        $fwLang = substr($fwUri, 0, 2);
    }
} else if (getenv('FWLANG', true)) {
    $fwLang = getenv('FWLANG', true);
}

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "FeministWiki";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
if ($fwLang === NULL) {
    $wgScriptPath = "/w";
    $wgArticlePath = "/wiki/$1";
} else {
    $wgScriptPath = "/{$fwLang}/w";
    $wgArticlePath = "/{$fwLang}/wiki/$1";
}

## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://feministwiki.org";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
    "1x"   => "$wgResourceBasePath/resources/assets/fw-logo-135.png",
    "1.5x" => "$wgResourceBasePath/resources/assets/fw-logo-203.png",
    "2x"   => "$wgResourceBasePath/resources/assets/fw-logo-270.png"
];
$wgFavicon = "$wgResourceBasePath/resources/assets/fw-favicon.ico";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "technician@feministwiki.org";
$wgPasswordSender = "technician@feministwiki.org";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
if ($fwLang === NULL) {
    $wgDBname = "feministwiki";
} else {
    $wgDBname = "feministwiki_{$fwLang}";
}
$wgDBuser = "feministwiki";
#$wgDBpassword = (Set in ../secrets.php);

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

if ($fwLang !== NULL) {
    $wgForeignFileRepos[] = [
        'class' => 'ForeignDBRepo',
        'name' => 'FeministWiki',
        'url' => "https://feministwiki.org/w/images",
        'directory' => '/var/www/fw/wiki/w/images',
        'hashLevels' => 2,
        'dbType' => $wgDBtype,
        'dbServer' => $wgDBserver,
        'dbUser' => $wgDBuser,
        'dbPassword' => $wgDBpassword,
        'dbFlags' => DBO_DEFAULT,
        'dbName' => 'feministwiki',
        'tablePrefix' => '',
        'hasSharedCache' => false,
        'descBaseUrl' => 'https://feministwiki.org/wiki/File:',
        'fetchDescription' => false
    ];
}

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "C.UTF-8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
if ($fwLang === NULL) {
    $wgLanguageCode = "en";
} else {
    $wgLanguageCode = $fwLang;
}

#$wgSecretKey = (Set in ../secrets.php);

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
#$wgUpgradeKey = (Set in ../secrets.php);

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://creativecommons.org/licenses/by-sa/4.0/";
$wgRightsText = "Creative Commons Attribution-ShareAlike";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;


# End of automatically generated settings.
# Add more configuration options below.


#####################################################
#####################################################

wfLoadExtensions([
    'Cite',
    'CodeEditor',
    'EmbedVideo',
    'Interwiki',
    'LDAPAuthentication2',
    'LDAPProvider',
    'LDAPUserInfo',
    'MobileFrontend',
    'MultimediaViewer',
    'PageImages',
    'ParserFunctions',
    'PluggableAuth',
    'Popups',
    'Renameuser',
    'TextExtracts',
    'UniversalLanguageSelector',
    'UserMerge',
    'WikiEditor',
    'WikiSEO',
]);

#
# Skins
#

wfLoadSkin('MinervaNeue');
wfLoadSkin('Vector');
#wfLoadSkin('Sp-Beta');

$wgDefaultSkin = 'vector-2022';
$wgVectorDefaultSidebarVisibleForAnonymousUser = true;

#
# General
#

if ($fwLang === NULL) {
    $wgMainPageIsDomainRoot = true;
}

$wgRestrictDisplayTitle = false;

$wgExternalLinkTarget = '_blank';

$wgNamespaceAliases = [
    'fw' => NS_PROJECT,
    'mw' => NS_MEDIAWIKI,
    'f' => NS_FILE,
    't' => NS_TEMPLATE,
];

#
# Security
#

$wgPasswordAttemptThrottle = [
    [ 'count' => 5, 'seconds' => 3600 ]
];

#
# Performance
#

# We use a systemd service for this
$wgJobRunRate = 0;

# Don't invalidate caches every time this file is edited
$wgInvalidateCacheOnLocalSettingsChange = false;

# Update this to invalidate caches manually instead
$wgCacheEpoch = 20240528030000;

# Parser cache lasts 10 days
$wgParserCacheExpiryTime = 10 * 24 * 60 * 60;

# Allow caching via reverse proxy
$wgUseCdn = true;
$wgCdnMaxAge = 24 * 60 * 60;

# Can't send purge to Nginx; only Varnish supported
#$wgCdnServers = [ '127.0.0.1' ];
#$wgInternalServer = 'http://127.0.0.1';

# Seems to cause issues?
#$wgEnableSidebarCache = true;
#$wgSidebarCacheExpiry = 3600;

#
# SEO
#

# Add rel="nofollow" to links to pages that don't exist (redlinks)
$wgHooks['HtmlPageLinkRendererEnd'][] = 'noFollowRedLinks';
function noFollowRedLinks(
    $linkRenderer, $target, $isKnown, &$text, &$attribs, &$ret)
{
    if (!$isKnown && preg_match('/\bnew\b/S', $attribs['class'] ?? "")) {
        $attribs['rel'] = 'nofollow';
    }
    return true;
}

# We don't have spam issues, so there's no need for this
$wgNoFollowLinks = false;

####################################
#                                  #
# Extension-specific configuration #
#                                  #
####################################

#
# Interwiki
#

$wgGroupPermissions['sysop']['interwiki'] = true;

#
# UserMerge
#

$wgGroupPermissions['bureaucrat']['usermerge'] = true;

#
# PluggableAuth / LDAP stuff
#

$wgGroupPermissions['*']['autocreateaccount'] = true;

$LDAPProviderDomainConfigProvider = function() use ($fwLDAPPassword) {
    $connection = [
        'server' => '127.0.0.1', //ldap.feministwiki.org
        'port' => '389', //636
        'user' => 'cn=readonly,dc=feministwiki,dc=org',
        'pass' => $fwLDAPPassword,
        'basedn' => 'ou=members,dc=feministwiki,dc=org',
        'userbasedn' => 'ou=members,dc=feministwiki,dc=org',
        'groupbasedn' => 'ou=groups,dc=feministwiki,dc=org',
        'searchattribute' => 'cn',
        'searchstring' => 'cn=USER-NAME,ou=members,dc=feministwiki,dc=org',
        'usernameattribute' => 'cn',
        'realnameattribute' => 'sn',
        'emailattribute' => 'mail',
    ];
    $attributesMap = [
        'email' => 'mail',
        'realname' => 'sn',
    ];
    return new \MediaWiki\Extension\LDAPProvider\DomainConfigProvider\InlinePHPArray([
        'feministwiki' => [
            'connection' => $connection,
            'userinfo' => [
                'attributes-map' => $attributesMap
            ],
        ]
    ]);
};

$wgPluggableAuth_Config['Log in'] = [
    'plugin' => 'LDAPAuthentication2',
    'data' => [
        'domain' => 'feministwiki'
    ]
];

#
# WikiSEO
#

$wgWikiSeoDefaultImage = 'FeministWiki_banner.png';
$wgTwitterSiteHandle = '@FeministWiki';
$wgGoogleSiteVerificationKey = "RZf8hzu0sR32H9OsEXa3-aN3LzE4T2nLPg1s9SrJgJI";

#############
#           #
# Debugging #
#           #
#############

#$wgDebugLogFile = "/tmp/mw-debug.log";

#$wgShowExceptionDetails = true;
#$wgShowDBErrorBacktrace = true;
#$wgShowSQLErrors = true;
